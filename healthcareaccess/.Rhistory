births = rename(
births,
"Female Births" = `f_births`,
"Male Births" = `m_births`)
# Pivot longer
births_long = pivot_longer(
births,
cols = c("Female Births", "Male Births"),
names_to = "Gender",
values_to = "Births")
head(births)
births = read_csv("2022birthdataWiscIteration2.csv")
head(births)
births = read_csv("2022birthdataWiscIteration2.csv")
head(births
births = read_csv("2022birthdataWiscIteration2.csv")
births = read_csv("2022birthdataWiscIteration2.csv")
head(births)
births = read_csv("2022birthdataWiscIteration2.csv")
head(births)
colnames(births)
# table for top 5 highest birth counties
top_births = births %>%
group_by(
county
) %>%
arrange(desc(total_births))
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
# table for top 5 highest birth counties
top_births = births %>%
group_by(
county
) %>%
arrange(desc(total_births))
summarise(
"Total Births" = births$total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
# table for top 5 highest birth counties
top_births = births %>%
group_by(
county
) %>%
arrange(desc(total_births)) %>%
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
# table for top 5 highest birth counties
top_births = births %>%
group_by(
county
) %>%
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
# table for top 5 highest birth counties
top_births = births %>%
group_by(
county
) %>%
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
top_births
# table for top 5 highest birth counties
top_births = births %>%
group_by(
county
) %>%
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
top_births
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
top_births
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
summarise(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
top_births
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
group_by(
county
)
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
births = read_csv("2022birthdataWiscIteration2.csv")
head(births)
colnames(births)
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
group_by(
county
)
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
group_by(
county
) %>%
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
top_births
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
summarise(
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
top_births
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
summarise(
"County" = county
"Total Births" = total_births,
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
summarise(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
top_births
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
summarise(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
top_births
# table for top 5 highest birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
summarise(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
head(top_births, 10)
# table for top 5 highest fertility rate counties
top_fertility = births %>%
arrange(desc(fertility_rate)) %>%
summarise(
"County" = county,
"Fertility Rate" = fertility_rate,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births
)
head(top_births, 10)
# table for top 5 highest fertility rate counties
top_fertility = births %>%
arrange(desc(fertility_rate)) %>%
reframe(
"County" = county,
"Fertility Rate" = fertility_rate,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births
)
head(top_births, 10)
# table for top 5 highest fertility rate counties
top_fertility = births %>%
arrange(desc(fertility_rate)) %>%
reframe(
"County" = county,
"Fertility Rate" = fertility_rate,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births
)
head(top_fertility, 10)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(knitr)
library(tidyr)
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(knitr)
library(tidyr)
library(kableExtra)
# table for top 5 highest total birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
reframe(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
head(top_births, 10)
kbl(top_births)
?kbl
# table for top 5 highest total birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
reframe(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
head(top_births, 10)
top_births %>%
kbl() %>%
kable_styling()
# table for top 5 highest total birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
reframe(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)
head(top_births, 10)
top_births %>%
kbl() %>%
kable_paper("hover", full_width = F)
# table for top 5 highest fertility rate counties
top_fertility = births %>%
arrange(desc(fertility_rate)) %>%
reframe(
"County" = county,
"Fertility Rate" = fertility_rate,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births
)
head(top_fertility, 10)
top_fertility %>%
kbl() %>%
kable_paper("hover", full_width = F)
# table for top 5 highest fertility rate counties
top_fertility = births %>%
arrange(desc(fertility_rate)) %>%
reframe(
"County" = county,
"Fertility Rate" = fertility_rate,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births
)%>%
slice_head(n = 10)
# head(top_fertility, 10)
top_fertility %>%
kbl() %>%
kable_paper("hover", full_width = F)
# table for top 5 highest total birth counties
top_births = births %>%
arrange(desc(total_births)) %>%
reframe(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)%>%
slice_head(n = 10)
# head(top_births, 10)
top_births %>%
kbl() %>%
kable_paper("hover", full_width = F)
births = read_csv("2022birthdataWiscIteration2.csv")
?read_csv
births = invisible(read_csv("2022birthdataWiscIteration2.csv"))
# table for top 10 highest total birth counties
top_births = births %>%
select(county != "Total") %>%
arrange(desc(total_births)) %>%
reframe(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)%>%
slice_head(n = 10)
births = invisible(read_csv("2022birthdataWiscIteration2.csv"))
# table for top 10 highest total birth counties
top_births = births %>%
select(county != "Total") %>%
arrange(desc(total_births)) %>%
reframe(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)%>%
slice_head(n = 10)
# table for top 10 highest total birth counties
top_births = births %>%
filter(county != "Total") %>%
arrange(desc(total_births)) %>%
reframe(
"County" = county,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births,
"Crude Birth Rate" = crude_birth_rate
)%>%
slice_head(n = 10)
# head(top_births, 10)
top_births %>%
kbl() %>%
kable_paper("hover", full_width = F)
# table for top 10 highest fertility rate counties
top_fertility = births %>%
filter(county != "Total") %>%
arrange(desc(fertility_rate)) %>%
reframe(
"County" = county,
"Fertility Rate" = fertility_rate,
"Total Births" = total_births,
"Female Babies" = f_births,
"Male Babies" = m_births
)%>%
slice_head(n = 10)
# head(top_fertility, 10)
top_fertility %>%
kbl() %>%
kable_paper("hover", full_width = F)
births = read_csv("https://uwmadison.app.box.com/s/kjp3k46jarhw0bt033oi8fzhdjc7sn97/file/1481424332707")
births = read_csv("https://uwmadison.app.box.com/s/kjp3k46jarhw0bt033oi8fzhdjc7sn97/file/1481424332707")
head(births)
births = read_csv("https://uwmadison.box.com/shared/static/xgwpsw0nx2gniuof4okacl9d8huu4v3v.csv")
head(births)
runApp('app_mother_age.R')
runApp('app_mother_age.R')
runApp('app_mother_age.R')
runApp('app_mother_age.R')
runApp('app_mother_age.R')
runApp('app_mother_age.R')
runApp('app_mother_age.R')
library(shiny); runApp('app_updated2.R')
library(shiny); runApp('app_updated2.R')
library(shiny); runApp('app_updated2.R')
runApp('~/24spcourses/436stat/healthcare_access/HealthCareAccessChrisGottwaldt')
install.packages(c("shiny", "shinydashboard", "DT", "tidyverse", "plotly", "httr"), repos = "http://cran.us.r-project.org")
shiny::runApp('~/24spcourses/436stat/healthcare_access/HealthCareAccessChrisGottwaldt')
install.packages(c("shiny", "shinydashboard", "DT", "tidyverse", "plotly", "httr"), repos = "http://cran.us.r-project.org")
runApp('~/24spcourses/436stat/healthcare_access/HealthCareAccessChrisGottwaldt')
library(shiny); runApp('testing.R')
install.packages(c("shiny", "shinydashboard", "DT", "tidyverse", "plotly", "httr"), repos = "http://cran.us.r-project.org")
source("~/24spcourses/436stat/healthcare_access/healthcareaccess/testing.R", echo=TRUE)
source("~/24spcourses/436stat/healthcare_access/healthcareaccess/testing.R", echo=TRUE)
source("~/24spcourses/436stat/healthcare_access/healthcareaccess/testing.R", echo=TRUE)
source("~/24spcourses/436stat/healthcare_access/healthcareaccess/testing.R", echo=TRUE)
source("~/24spcourses/436stat/healthcare_access/healthcareaccess/testing.R", echo=TRUE)
runApp('testing.R')
runApp('testing.R')
runApp('testing.R')
runApp('testing.R')
source("~/24spcourses/436stat/healthcare_access/healthcareaccess/testing.R", echo=TRUE)
library(shiny)
# install.packages(c("shiny", "shinydashboard", "DT", "tidyverse", "plotly", "httr", "readr"), repos = "http://cran.us.r-project.org")
library(tidyverse, quietly = TRUE)
library(shiny, quietly = TRUE)
library(shinydashboard, quietly = TRUE)
library(DT, quietly = TRUE)
library(plotly, quietly = TRUE)
library(httr, quietly = TRUE)
library(lubridate, quietly = TRUE)
# Define the API endpoint
api_url <- "https://data.medicaid.gov//api/1/metastore/schemas/dataset/items/99315a95-37ac-4eee-946a-3c523b4c481e"
# Make the GET request
response <- GET(api_url)
# Assuming the API returns a URL to the CSV file in the expected location in the JSON structure
if (status_code(response) == 200) {
data_url <- content(response, "parsed")$distribution[[1]]$downloadURL
# Download and read the CSV data
data <- read_csv(data_url)
}
head(data)
spec(data)
# Convert Effective_Date to Date format
new_data = data
new_data$Effective_Date <- mdy(new_data$Effective_Date)
head(new_data)
head(new_data)
spec(new_data)
plot <- ggplot(new_data, aes(x = Effective_Date, y = NADAC_Per_Unit, group = `NDC Description`, color = `NDC Description`)) +
geom_line() +  # This will connect points in lines
geom_point() +  # This adds points at each data entry
labs(title = "Change in NADAC Per Unit Over Time",
x = "Effective Date",
y = "NADAC Per Unit",
color = "NDC Description") +
theme_minimal() +
theme(legend.position = "bottom")  # Adjust legend position to bottom
# Print the plot
plot
# Convert Effective_Date to Date format
new_data = data
new_data$Effective_Date <- mdy(new_data$Effective_Date)
head(new_data)
head(new_data)
spec(new_data)
plot <- ggplot(new_data, aes(x = Effective_Date, y = NADAC_Per_Unit, group = `NDC Description`, color = `NDC Description`)) +
geom_line() +  # This will connect points in lines
geom_point() +  # This adds points at each data entry
labs(title = "Change in NADAC Per Unit Over Time",
x = "Effective Date",
y = "NADAC Per Unit",
color = "NDC Description") +
theme_minimal() +
theme(legend.position = "bottom")  # Adjust legend position to bottom
# Print the plot
print(plot)
# Convert Effective_Date to Date format
new_data = data
new_data$Effective_Date <- mdy(new_data$Effective_Date)
head(new_data)
head(new_data)
spec(new_data)
nadac <- ggplot(new_data, aes(x = Effective_Date, y = NADAC_Per_Unit, group = `NDC Description`, color = `NDC Description`)) +
geom_line() +  # This will connect points in lines
geom_point() +  # This adds points at each data entry
labs(title = "Change in NADAC Per Unit Over Time",
x = "Effective Date",
y = "NADAC Per Unit",
color = "NDC Description") +
theme_minimal() +
theme(legend.position = "bottom")  # Adjust legend position to bottom
nadac
# Convert Effective_Date to Date format
new_data = data
new_data$Effective_Date <- mdy(new_data$Effective_Date)
head(new_data)
head(new_data)
spec(new_data)
ggplot(new_data, aes(x = Effective_Date, y = NADAC_Per_Unit, group = `NDC Description`, color = `NDC Description`)) +
geom_line() +  # This will connect points in lines
geom_point() +  # This adds points at each data entry
labs(title = "Change in NADAC Per Unit Over Time",
x = "Effective Date",
y = "NADAC Per Unit",
color = "NDC Description") +
theme_minimal() +
theme(legend.position = "bottom")  # Adjust legend position to bottom
